plugins {
    id 'java'
    id 'maven'
    id 'maven-publish'
    id 'signing'
}

repositories {
    mavenCentral()
}

dependencies {
    compileOnly group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

version = getVersionNum(getParam('releaseVersion', 'RELEASE_VERSION', '0.0.0-SNAPSHOT'))

def getParam(propName, envName, defaultValue) {
    if (propName != null && project.hasProperty(propName)) {
        return project.property(propName)
    } else if (envName != null && System.getenv(envName) != null) {
        return System.getenv(envName)
    } else {
        return defaultValue
    }
}

def getVersionNum(ver) {
    return (ver.startsWith('v')) ? ver.substring(1) : ver
}


tasks.withType(JavaCompile) {
	options.encoding = sourceEncoding
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

jar {
    into('META-INF') {
        from 'LICENSE'
    }
}

javadoc {
    options.locale = 'en_US'
    options.encoding = sourceEncoding
    options.charSet = javadocCharset
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'mifmi-commons4j'
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = 'mifmi-commons4j'
                description = 'The mifmi-commons4j presents basic utility classes for Java development.'
                url = 'https://github.com/mifmi/mifmi-commons4j'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://raw.githubusercontent.com/mifmi/mifmi-commons4j/master/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'mozq'
                        name = 'Mozq'
                        email = 'dev@mozq.net'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/mifmi/mifmi-commons4j.git'
                    developerConnection = 'scm:git:https://github.com/mifmi/mifmi-commons4j.git'
                    url = 'https://github.com/mifmi/mifmi-commons4j'
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = getParam('sonatypeUsername', 'SONATYPE_USERNAME', null)
                password = getParam('sonatypePassword', 'SONATYPE_PASSWORD', null)
            }
        }
    }
}

signing {
    def signingKeyId = getParam('signingKeyId', 'SIGNING_KEY_ID', null)
    def signingKey = getParam('signingKey', 'SIGNING_KEY', null)
    def signingPassword = getParam('signingPassword', 'SIGNING_PASSWORD', null)
    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

tasks.withType(Sign) {
    onlyIf { !version.endsWith('SNAPSHOT') }
}
